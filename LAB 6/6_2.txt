
#include "PLL.h"
#include "tm4c123gh6pm.h"

      
void PortF_Init(void);


void DisableInterrupts(void); // Disable interrupts
void EnableInterrupts(void);  // Enable interrupts
long StartCritical (void);    // previous I bit, disable interrupts
void EndCritical(long sr);    // restore I bit to previous value
void WaitForInterrupt(void);  // low power mode
//volatile unsigned long Counts = 0;



// **************SysTick_Init*********************
// Initialize SysTick periodic interrupts
// Input: interrupt period

void SysTick_Init(unsigned long period){
  NVIC_ST_CTRL_R = 0;         // disable SysTick during setup
  NVIC_ST_RELOAD_R = period-1;// reload value
  NVIC_ST_CURRENT_R = 0;      // any write to current clears it
  NVIC_SYS_PRI3_R = (NVIC_SYS_PRI3_R&0x00FFFFFF)|0x40000000; // priority 2
                              // enable SysTick with core clock and interrupts
  NVIC_ST_CTRL_R = 0x07;
  EnableInterrupts();
}
// Interrupt service routine

void SysTick_Handler(void){
       // Code for Motor control

}
int main(void){
 
	PLL_Init();   // 80 MHz
	PortF_Init();
	
  SysTick_Init(800000);        // initialize SysTick timer
  EnableInterrupts();

  while(1){                   // interrupts every 1ms, 500 Hz flash
   WaitForInterrupt();


  }
}



void PortF_Init(void)
{ 
	unsigned long volatile delay;
	SYSCTL_RCGC2_R |= 0x20;// clock for Port F
	delay = SYSCTL_RCGC2_R;// wait 3-5 bus cycles 	
	GPIO_PORTF_LOCK_R = 0x4C4F434B;//unlock GPIOPortF
	GPIO_PORTF_CR_R = 0x1F; // allow changes to PF4-0
	// only PF0 to be unlocked, other bits can't be
	GPIO_PORTF_AMSEL_R = 0x00;// disable analog
	GPIO_PORTF_PCTL_R = 0x00;// bits for PF4-0
	GPIO_PORTF_DIR_R = 0x0E;// PF4,0 in, PF3,1 out
	GPIO_PORTF_AFSEL_R = 0x00;//disable alt func
	GPIO_PORTF_PUR_R = 0x11;// enable pullup on PF0,4 
	GPIO_PORTF_DEN_R = 0x1F;// enable digital I/O
}

